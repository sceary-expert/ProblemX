class Solution
{
    public:
    //Function to find minimum number of attempts needed in 
    //order to find the critical floor.
    vector<vector<int>>memo;
    int Drop(int n, int k)
    {
        if(n == 1)return k;
        if(k == 1 || k ==0) return k;
        if(memo[n][k] != -1)return memo[n][k];
        int mini = INT_MAX;
        for(int i = 1; i <= k; i++)
        {
               int temp = 1 + max(Drop(n - 1, i - 1), Drop(n, k - i));
               if(temp < mini)mini = temp;
        }
        return memo[n][k] = mini;
    }
    int eggDrop(int n, int k) 
    {
        // your code here
        memo.resize(n + 1, vector<int>(k + 1, -1));
        return Drop(n, k);
        
    }
};
