class Solution {
public:
        bool isMatching(string s, string p)
        {
                string str = s;
                for(int i = 0; i < p.size(); i++)
                {
                        char c = p[i];//c
                        char sc = str[i];//a
                        for(int j = 0; j < s.size(); j++)
                        {
                                if(str[j] == sc)s[j] = c;
                        }
                }
                if(s == p)return true;
                else return false;
        }
    vector<string> findAndReplacePattern(vector<string>& words, string pattern) {
            unordered_set<char>SetPattern;
            vector<string>ans;
            for(auto &p : pattern)
            {
                    SetPattern.insert(p);
            }
            int pSize = SetPattern.size();
        for(auto &word : words)
        {
           unordered_set<char>SetWord;
                for(auto &p : word)
            {
                    SetWord.insert(p);
            }
            int wSize = SetWord.size();
            if(pSize == wSize)
            {
                    if(isMatching(word, pattern))ans.push_back(word);
            }
        }
            return ans;
    }
};
