class Solution {
  public:
    int longestPerfectPiece(int arr[], int N) {
        /*
        N = 11
        arr[] = {5, 4, 5, 5, 6, 7, 8, 8, 8, 7, 6}
        Output:
        5
        */
        int p = 0;
        //int mx = INT_MIN, mn = INT_MAX;
        
        multiset<int>pq;
        
        int ans =  0;
        
        for(int i = 0; i < N; i++)
        {
            pq.insert(arr[i]);
            //cout<<arr[i]<<endl;
            //mx = *pq.rend(), mn = *pq.begin();
            //cout<<*pq.begin()<<" "<<*pq.rbegin()<<endl;
            while(p < N && pq.size() > 0 && *pq.begin() + 1 < *pq.rbegin())
            {
                //cout<<*pq.begin()<<" "<<*pq.rbegin()<<endl;
                int target = arr[p];
                //auto itr = pq.find(target);
                pq.erase(target);
                p++;
            }
            int sz = pq.size();
            //ans = max(ans, pq.size());
            if(sz > ans)ans = sz;
        }
        return ans;
    }
};
