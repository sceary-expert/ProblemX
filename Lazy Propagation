#define mid (beg + end) / 2
#define N  (int)(1e5 + 5)

int st[4 * N];
int lazy[4 * N];
int a[N];

void push_down(int pos, int beg, int end)
{
  if(lazy[pos] != 0)
  {
    st[pos] += lazy[pos] * (1 + end - beg);
    if(beg != end)
    {
      lazy[2 * pos + 1] += lazy[pos];
      lazy[2 * pos + 2] += lazy[pos];  
    }
    lazy[pos] = 0;
  }
}
int query(int beg, int end, int ql, int qr, int pos)
{
  push_down(pos, beg, end);
  if(ql <= beg && qr >= end)
  {
    return st[pos];
  }
  else if(ql > end || qr < beg)
  {
    return 0;
  }
  return query(beg, mid, ql, qr, 2 * pos + 1) +
  query(mid + 1, end, ql, qr, 2 * pos + 2);

}
void build(int beg, int end, int pos)
{
  if(beg == end)
  {
    st[pos] = a[beg];
    return;
  }
  build(beg, mid, 2 * pos + 1);
  build(mid + 1, end, 2 * pos + 2);
  st[pos] = st[2 * pos + 1] + st[2 * pos + 2];
}
void update(int beg, int end, int ul, int ur, int val, int pos)
{
  push_down(pos, beg, end);
  if(ul <= beg && ur >= end)
  {
    lazy[pos] = val;
    push_down(pos, beg, end);
    return;
  }
  else if(beg > ur ||end < ul)
  {
    return;
  }
  update(beg, mid, ul, ur, val, 2 * pos + 1);
  update(mid + 1, end, ul, ur, val, 2 * pos + 2);
  st[pos] = st[2 * pos + 1] + st[2 * pos + 2];


}
